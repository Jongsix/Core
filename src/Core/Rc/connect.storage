<?php
/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

namespace MikoPBX\Core\Rc;

use MikoPBX\Core\Config\RegisterDIServices;
use MikoPBX\Core\Workers\WorkerAmiListener;
use MikoPBX\PBXCoreREST\Workers\WorkerApiCommands;
use MikoPBX\Core\System\{Configs\SyslogConf, Processes, Upgrade\UpdateDatabase, Util, Storage, PBX};
use MikoPBX\Core\Asterisk\CdrDb;

require_once('Globals.php');
$fp = fopen('php://stdin', 'rb');
$storage = new Storage();

if(Storage::isStorageDiskMounted()){
	echo "\n ".Util::translate('Storage disk is already mounted...')." \n\n";
	sleep(2);
    return 0;
}

$valid_disks = [];
$all_hdd = $storage->getAllHdd();
$system_disk   = '';

$selected_disk = ['size' => 0, 'id' => ''];
foreach ($all_hdd as $disk) {
    $additional = '';
	if($disk['mounted'] && $disk['sys_disk'] && file_exists("/dev/{$disk['id']}4")){
        $system_disk = $disk['id'];
	    $additional.= "\033[31;1m [SYSTEM]\033[0m";
	}elseif ($disk['sys_disk'] && file_exists('/offload/livecd')){
        $system_disk = $disk['id'];
        $additional.= "\033[31;1m [SYSTEM]\033[0m";
	}elseif ($disk['mounted']){
	    continue;
    }

    if($selected_disk['size'] === 0 || $disk['size'] > $selected_disk['size'] ){
        $selected_disk = $disk;
    }

    $part = $disk['sys_disk']?'4':'1';
	if(Storage::isStorageDisk("/dev/{$disk['id']}{$part}")){
        $additional.= "\033[33;1m [STORAGE] \033[0m";
    }

    if($disk['sys_disk']){
        $part4_found = false;
        foreach ($disk['partitions'] as $partition){
            if($partition['dev'] === "{$disk['id']}4" && $partition['size'] > 1000){
                $part4_found = true;
            }
        }
        if($part4_found === false){
            continue;
        }
    }elseif($disk['size'] < 1024){
        continue;
    }
    $valid_disks[$disk['id']] = "  - {$disk['id']}, {$disk['size_text']}, {$disk['vendor']}{$additional}\n";
}

if(count($valid_disks) === 0) {
    echo "\n " . Util::translate('Valid disks not found...') . " \n";
    sleep(3);
    return 0;
}

echo "\n ".Util::translate('Select the drive to store the data.');
echo "\n ".Util::translate('Selected disk:')."\033[33;1m [{$selected_disk['id']}] \033[0m \n\n";
echo "\n ".Util::translate('Valid disks are:')." \n\n";
foreach ($valid_disks as $disk) {
    echo $disk;
}
echo "\n";

do {
	echo "\n".Util::translate('Enter the device name:').Util::translate('(default value = ').$selected_disk['id'].') :';
	$target_disk_storage = trim(fgets($fp));
	if ($target_disk_storage === '') {
        $target_disk_storage = $selected_disk['id'];
	}
} while (!array_key_exists($target_disk_storage, $valid_disks));

if(!empty($system_disk) && $system_disk === $target_disk_storage){
    // Выбран системный диск.
    $dev_disk  = "/dev/{$target_disk_storage}";
    $part_disk = "{$dev_disk}4";
}else{
    $dev_disk = "/dev/$target_disk_storage";
    $part_disk = "{$dev_disk}1";
    if(!Storage::isStorageDisk("{$part_disk}")){
        $storage->formatDiskLocal($dev_disk);
    }
}

$data=[
    'device' => $dev_disk,
    'uniqid' => $storage->getUuid($part_disk),
    'name'   => 'Storage №1'
];
$storage->saveDiskSettings($data);
if(file_exists('/offload/livecd')) {
    // Запуск АТС не требуется, это установка станции в режиме LiveCD.
    return true;
}

RegisterDIServices::recreateDBConnections(); //TODO:: может это сделать внутри стоража после монтирования нужной папки?
$storage->configure();
RegisterDIServices::recreateDBConnections(); //TODO:: может это сделать внутри стоража после монтирования нужной папки?

fclose(STDERR);
Util::echoWithSyslog(' - Update database ... '. PHP_EOL);
$dbUpdater = new UpdateDatabase();
$dbUpdater->updateDatabaseStructure();

$STDERR = fopen('php://stderr', 'w');
CdrDb::checkDb();

$sysLog = new SyslogConf();
$sysLog->reStart();

$pbx = new PBX();
$pbx->configure();

// Перезапускае связанные со storage процессы.
Processes::processPHPWorker(WorkerApiCommands::class);
Processes::processPHPWorker(WorkerAmiListener::class);

if(Storage::isStorageDiskMounted()){
    echo "\n ".Util::translate('Storage disk is already mounted...')." \n\n";
}else{
    echo "\n ".Util::translate('Failed to mount the disc...')." \n\n";
}
sleep(3);
fclose($STDERR);
