#!/usr/bin/php -f
<?php
/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

namespace MikoPBX\Core\Rc;


use Phalcon\Di;
use MikoPBX\Core\System\{Processes, Util, Storage};

require_once('Globals.php');

$NoCfDevice = <<<EOD

*******************************************************************************
* FATAL ERROR                                                                 *
* The device that contains the configuration file (mikopbx.db) could not be   *
* found. MikoPBX can not continue booting.                                     *
*******************************************************************************

EOD;

$phalconConfig  = Di::getDefault()->get('config');
$cfDir         = $phalconConfig->path('core.cfDir');
$varEtcDir     = $phalconConfig->path('core.varEtcDir');
$dbFile         = $phalconConfig->path('database.dbfile');
$mountPath      = Util::which('mount');
$unmountPath    = Util::which('umount');
$fdiskPath      = Util::which('fdisk');
$grepPath       = Util::which('grep');
$cutPath        = Util::which('cut');
$uniqPath       = Util::which('uniq');
$sqlite3Path    = Util::which('sqlite3');
$rmPath         = Util::which('rm');
$mvPath         = Util::which('mv');
$haltPath       = Util::which('halt');


$cfgdevice = '';
/* check if there's already an fstab (NFS booting?) */
if (file_exists('/etc/fstab')) {
    return; // Обработка не требуется.
}

if (file_exists('/offload/livecd')) {
    $d_path_info = pathinfo($dbFile);
    // Копируем файл базы данных настроек.
    copy('/offload/conf/mikopbx.db', $dbFile);
    Util::addRegularWWWRights($d_path_info);
    Util::addRegularWWWRights($dbFile);
    return; // Обработка не требуется.
}


$storage = new Storage();
/* iterate through the disks fdisk finds until one contains a mikopbx.db */
$attempts = 2;
while ($attempts--) {
    Processes::mwExec("{$fdiskPath} -l | {$grepPath} \"^/dev/\" | {$cutPath} -c 6-8 | {$uniqPath}", $disks);
    // " - Mount storage... "
    echo "\n - Found disks: " . implode(', ', $disks) . "\n";
    foreach ($disks as $disk) {
        echo " - Looking for configuration on: $disk\n";
        $part = (strpos($disk, 'mmcblk') !== false) ? 'p3' : '3';

        $uuid   = $storage->getUuid("/dev/{$disk}{$part}");
        $format = $storage->getFsType("{$disk}{$part}");
        // Запустим проверку раздела диска
        $fsckPath = Util::which("fsck.{$format}");
        Processes::mwExec("if [ -b /dev/{$disk}{$part} ]; then {$fsckPath} -f -p /dev/{$disk}{$part}; fi;");
        if (Processes::mwExec("{$mountPath} -t {$format} -rw UUID=\"{$uuid}\" {$cfDir}") !== 0) {
            continue;
        }

        if (file_exists($dbFile) && filesize($dbFile) > 0) {
            $cfgdevice    = $disk;
            $cfgpartition = $cfgdevice . $part;
            echo " - Found configuration on $cfgpartition.\n";
            $old_db_name = '/cf/conf/mikozia.db';
            if (file_exists($old_db_name)) {
                @unlink($dbFile);
                @rename($old_db_name, $dbFile);
            }
            if (Processes::mwExec("{$sqlite3Path} {$dbFile} 'VACUUM'") !== 0) {
                $tmp_name = '/tmp/' . time() . '.db.dmp';
                Processes::mwExec("{$sqlite3Path} {$dbFile} .dump | {$sqlite3Path} {$tmp_name}");
                Processes::mwExec("{$rmPath} {$dbFile}*");
                Processes::mwExec("{$mvPath} {$tmp_name} {$dbFile}");
            }
            break;
        }

        Processes::mwExec("{$unmountPath} -f {$cfDir}");
    }
    if ($cfgdevice) {
        break;
    }
    if ($attempts) {
        echo " - Configuration not found.\n";
        echo " - Waiting for devices to settle and attempting again.\n";
        sleep(3);
    }
}

if ( ! $cfgdevice) {
    /* no device found, print an error and die */
    echo $NoCfDevice;
    Processes::mwExec($haltPath);
} else {
    // Запишем в файл имя подключенного устройства.
    file_put_contents("{$varEtcDir}/cfdevice", $cfgdevice);
}
