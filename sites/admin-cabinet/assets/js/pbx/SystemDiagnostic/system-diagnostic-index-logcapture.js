"use strict";

/*
 * Copyright Â© MIKO LLC - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Nikolay Beketov, 8 2020
 */

/* global sessionStorage, PbxApi */
var archivePackingCheckWorker = {
  timeOut: 3000,
  timeOutHandle: '',
  errorCounts: 0,
  filename: '',
  initialize: function () {
    function initialize(filename) {
      archivePackingCheckWorker.filename = filename;
      archivePackingCheckWorker.restartWorker(filename);
    }

    return initialize;
  }(),
  restartWorker: function () {
    function restartWorker() {
      window.clearTimeout(archivePackingCheckWorker.timeoutHandle);
      archivePackingCheckWorker.worker();
    }

    return restartWorker;
  }(),
  worker: function () {
    function worker() {
      PbxApi.SyslogDownloadLogsArchive(archivePackingCheckWorker.filename, archivePackingCheckWorker.cbAfterResponse);
      archivePackingCheckWorker.timeoutHandle = window.setTimeout(archivePackingCheckWorker.worker, archivePackingCheckWorker.timeOut);
    }

    return worker;
  }(),
  cbAfterResponse: function () {
    function cbAfterResponse(response) {
      if (archivePackingCheckWorker.errorCounts > 50) {
        UserMessage.showError(globalTranslate.sd_DownloadPcapFileError);
        systemDiagnosticCapture.$stopBtn.removeClass('disabled loading').addClass('disabled');
        systemDiagnosticCapture.$startBtn.removeClass('disabled loading');
        window.clearTimeout(archivePackingCheckWorker.timeoutHandle);
      }

      if (response === undefined || Object.keys(response).length === 0) {
        archivePackingCheckWorker.errorCounts += 1;
        return;
      }

      if (response.status === 'READY') {
        systemDiagnosticCapture.$stopBtn.removeClass('disabled loading').addClass('disabled');
        systemDiagnosticCapture.$startBtn.removeClass('disabled loading');
        window.location = response.filename;
        window.clearTimeout(archivePackingCheckWorker.timeoutHandle);
      } else if (response.status !== undefined) {
        archivePackingCheckWorker.errorCounts = 0;
      } else {
        archivePackingCheckWorker.errorCounts += 1;
      }
    }

    return cbAfterResponse;
  }()
};
var systemDiagnosticCapture = {
  $startBtn: $('#start-capture-button'),
  $stopBtn: $('#stop-capture-button'),
  $showBtn: $('#show-last-log'),
  initialize: function () {
    function initialize() {
      if (sessionStorage.getItem('LogsCaptureStatus') === 'started') {
        systemDiagnosticCapture.$startBtn.addClass('disabled loading');
        systemDiagnosticCapture.$stopBtn.removeClass('disabled');
      } else {
        systemDiagnosticCapture.$startBtn.removeClass('disabled loading');
        systemDiagnosticCapture.$stopBtn.addClass('disabled');
      }

      systemDiagnosticCapture.$startBtn.on('click', function (e) {
        e.preventDefault();
        systemDiagnosticCapture.$startBtn.addClass('disabled loading');
        systemDiagnosticCapture.$stopBtn.removeClass('disabled');
        PbxApi.SyslogStartLogsCapture(systemDiagnosticCapture.cbAfterStartCapture);
      });
      systemDiagnosticCapture.$stopBtn.on('click', function (e) {
        e.preventDefault();
        systemDiagnosticCapture.$startBtn.removeClass('loading');
        systemDiagnosticCapture.$stopBtn.addClass('loading');
        PbxApi.SyslogStopLogsCapture(systemDiagnosticCapture.cbAfterStopCapture);
      });
    }

    return initialize;
  }(),

  /**
   *  Callback after push start logs collect button
   * @param response
   */
  cbAfterStartCapture: function () {
    function cbAfterStartCapture(response) {
      if (response !== false) {
        sessionStorage.setItem('LogsCaptureStatus', 'started');
        setTimeout(function () {
          sessionStorage.setItem('LogsCaptureStatus', 'stopped');
        }, 300000);
      }
    }

    return cbAfterStartCapture;
  }(),

  /**
   * Callback after push stop logs collect button
   * @param response
   */
  cbAfterStopCapture: function () {
    function cbAfterStopCapture(response) {
      if (response !== false) {
        archivePackingCheckWorker.initialize(response.filename);
      }
    }

    return cbAfterStopCapture;
  }()
};
$(document).ready(function () {
  systemDiagnosticCapture.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,