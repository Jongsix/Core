"use strict";

/*
 * Copyright Â© MIKO LLC - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Alexey Portnov, 8 2020
 */

/* global ace, PbxApi */
var updateLogViewWorker = {
  timeOut: 3000,
  timeOutHandle: '',
  errorCounts: 0,
  initialize: function () {
    function initialize() {
      updateLogViewWorker.restartWorker();
    }

    return initialize;
  }(),
  restartWorker: function () {
    function restartWorker() {
      window.clearTimeout(updateLogViewWorker.timeoutHandle);
      updateLogViewWorker.worker();
    }

    return restartWorker;
  }(),
  worker: function () {
    function worker() {
      var data = systemDiagnosticLogs.$formObj.form('get values');
      PbxApi.SyslogGetLogFromFile(data.filename, data.filter, data.lines, systemDiagnosticLogs.cbUpdateLogText);
      updateLogViewWorker.timeoutHandle = window.setTimeout(updateLogViewWorker.worker, updateLogViewWorker.timeOut);
    }

    return worker;
  }(),
  stop: function () {
    function stop() {
      window.clearTimeout(updateLogViewWorker.timeoutHandle);
    }

    return stop;
  }()
};
var systemDiagnosticLogs = {
  $showBtn: $('#show-last-log'),
  $downloadBtn: $('#download-file'),
  $showAutoBtn: $('#show-last-log-auto'),
  viewer: '',
  $fileSelectDropDown: $('#system-diagnostic-form .filenames-select'),
  logsItems: [],
  defaultLogItem: null,
  $formObj: $('#system-diagnostic-form'),
  $fileName: $('#system-diagnostic-form .filename'),
  initialize: function () {
    function initialize() {
      systemDiagnosticLogs.initializeAce();
      PbxApi.SyslogGetLogsList(systemDiagnosticLogs.cbFormatDropdownResults);
      systemDiagnosticLogs.$showBtn.on('click', function (e) {
        e.preventDefault();
        var data = systemDiagnosticLogs.$formObj.form('get values');
        PbxApi.SyslogGetLogFromFile(data.filename, data.filter, data.lines, systemDiagnosticLogs.cbUpdateLogText);
      });
      systemDiagnosticLogs.$downloadBtn.on('click', function (e) {
        e.preventDefault();
        var data = systemDiagnosticLogs.$formObj.form('get values');
        PbxApi.SyslogDownloadLogFile(data.filename, systemDiagnosticLogs.cbDownloadFile);
      });
      systemDiagnosticLogs.$showAutoBtn.on('click', function (e) {
        e.preventDefault();
        var $reloadIcon = systemDiagnosticLogs.$showAutoBtn.find('i.refresh');

        if ($reloadIcon.hasClass('loading')) {
          $reloadIcon.removeClass('loading');
          updateLogViewWorker.stop();
        } else {
          $reloadIcon.addClass('loading');
          updateLogViewWorker.initialize();
        }
      });
    }

    return initialize;
  }(),
  initializeAce: function () {
    function initializeAce() {
      var aceHeight = window.innerHeight - 300;
      var rowsCount = Math.round(aceHeight / 16.3);
      $(window).load(function () {
        $('.log-content-readonly').css('min-height', "".concat(aceHeight, "px"));
      });

      var IniMode = ace.require('ace/mode/julia').Mode;

      systemDiagnosticLogs.viewer = ace.edit('log-content-readonly');
      systemDiagnosticLogs.viewer.session.setMode(new IniMode());
      systemDiagnosticLogs.viewer.setTheme('ace/theme/monokai');
      systemDiagnosticLogs.viewer.resize();
      systemDiagnosticLogs.viewer.renderer.setShowGutter(false);
      systemDiagnosticLogs.viewer.setOptions({
        showLineNumbers: false,
        showPrintMargin: false,
        readOnly: true,
        maxLines: rowsCount
      });
    }

    return initializeAce;
  }(),

  /**
   * Makes formatted menu structure
   */
  cbFormatDropdownResults: function () {
    function cbFormatDropdownResults(response) {
      if (response === false) {
        return;
      }

      systemDiagnosticLogs.logsItems = [];
      var files = response.files;
      $.each(files, function (index, item) {
        systemDiagnosticLogs.logsItems.push({
          name: "".concat(index, " (").concat(item.size, ")"),
          value: item.path,
          selected: item["default"]
        });
      });
      systemDiagnosticLogs.$fileSelectDropDown.dropdown({
        values: systemDiagnosticLogs.logsItems,
        onChange: systemDiagnosticLogs.cbOnChangeFile,
        ignoreCase: true,
        fullTextSearch: true,
        forceSelection: false
      });
    }

    return cbFormatDropdownResults;
  }(),

  /**
   * Callback after change log file in select
   * @param value
   */
  cbOnChangeFile: function () {
    function cbOnChangeFile(value) {
      if (value.length === 0) {
        return;
      }

      systemDiagnosticLogs.$formObj.form('set value', 'filename', value);
      var data = systemDiagnosticLogs.$formObj.form('get values');
      PbxApi.SyslogGetLogFromFile(data.filename, data.filter, data.lines, systemDiagnosticLogs.cbUpdateLogText);
    }

    return cbOnChangeFile;
  }(),

  /**
   * Updates log view
   * @param data
   */
  cbUpdateLogText: function () {
    function cbUpdateLogText(data) {
      systemDiagnosticLogs.viewer.getSession().setValue(data.content);
      var row = systemDiagnosticLogs.viewer.session.getLength() - 1;
      var column = systemDiagnosticLogs.viewer.session.getLine(row).length; // or simply Infinity

      systemDiagnosticLogs.viewer.gotoLine(row + 1, column);
    }

    return cbUpdateLogText;
  }(),

  /**
   * After push button download file
   * @param response
   */
  cbDownloadFile: function () {
    function cbDownloadFile(response) {
      if (response !== false) {
        window.location = response.filename;
      }
    }

    return cbDownloadFile;
  }()
};
$(document).ready(function () {
  systemDiagnosticLogs.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,