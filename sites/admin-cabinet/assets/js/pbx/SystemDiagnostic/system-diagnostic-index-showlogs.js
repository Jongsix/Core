"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global ace, PbxApi */
var updateLogViewWorker = {
  timeOut: 3000,
  timeOutHandle: '',
  errorCounts: 0,
  initialize: function () {
    function initialize() {
      updateLogViewWorker.restartWorker();
    }

    return initialize;
  }(),
  restartWorker: function () {
    function restartWorker() {
      window.clearTimeout(updateLogViewWorker.timeoutHandle);
      updateLogViewWorker.worker();
    }

    return restartWorker;
  }(),
  worker: function () {
    function worker() {
      systemDiagnosticLogs.updateLogFromServer();
      updateLogViewWorker.timeoutHandle = window.setTimeout(updateLogViewWorker.worker, updateLogViewWorker.timeOut);
    }

    return worker;
  }(),
  stop: function () {
    function stop() {
      window.clearTimeout(updateLogViewWorker.timeoutHandle);
    }

    return stop;
  }()
};
var systemDiagnosticLogs = {
  $showBtn: $('#show-last-log'),
  $downloadBtn: $('#download-file'),
  $showAutoBtn: $('#show-last-log-auto'),
  $logContent: $('#log-content-readonly'),
  viewer: '',
  $fileSelectDropDown: $('#system-diagnostic-form .filenames-select'),
  logsItems: [],
  defaultLogItem: null,
  $dimmer: $('#get-logs-dimmer'),
  $formObj: $('#system-diagnostic-form'),
  $fileName: $('#system-diagnostic-form .filename'),
  initialize: function () {
    function initialize() {
      var aceHeight = window.innerHeight - 250;
      systemDiagnosticLogs.$dimmer.closest('div').css('min-height', "".concat(aceHeight, "px"));
      systemDiagnosticLogs.$fileSelectDropDown.dropdown({
        values: systemDiagnosticLogs.logsItems,
        onChange: systemDiagnosticLogs.cbOnChangeFile,
        ignoreCase: true,
        fullTextSearch: true,
        forceSelection: false
      });
      systemDiagnosticLogs.initializeAce();
      PbxApi.SyslogGetLogsList(systemDiagnosticLogs.cbFormatDropdownResults);
      systemDiagnosticLogs.$showBtn.on('click', function (e) {
        e.preventDefault();
        systemDiagnosticLogs.updateLogFromServer();
      });
      systemDiagnosticLogs.$downloadBtn.on('click', function (e) {
        e.preventDefault();
        var data = systemDiagnosticLogs.$formObj.form('get values');
        PbxApi.SyslogDownloadLogFile(data.filename, systemDiagnosticLogs.cbDownloadFile);
      });
      systemDiagnosticLogs.$showAutoBtn.on('click', function (e) {
        e.preventDefault();
        var $reloadIcon = systemDiagnosticLogs.$showAutoBtn.find('i.refresh');

        if ($reloadIcon.hasClass('loading')) {
          $reloadIcon.removeClass('loading');
          updateLogViewWorker.stop();
        } else {
          $reloadIcon.addClass('loading');
          updateLogViewWorker.initialize();
        }
      });
      $('input').keyup(function (event) {
        if (event.keyCode === 13) {
          systemDiagnosticLogs.updateLogFromServer();
        }
      });
    }

    return initialize;
  }(),
  initializeAce: function () {
    function initializeAce() {
      var IniMode = ace.require('ace/mode/julia').Mode;

      systemDiagnosticLogs.viewer = ace.edit('log-content-readonly');
      systemDiagnosticLogs.viewer.session.setMode(new IniMode());
      systemDiagnosticLogs.viewer.setTheme('ace/theme/monokai');
      systemDiagnosticLogs.viewer.renderer.setShowGutter(false);
      systemDiagnosticLogs.viewer.setOptions({
        showLineNumbers: false,
        showPrintMargin: false,
        readOnly: true
      });
      $(window).load(function () {
        var aceHeight = window.innerHeight - systemDiagnosticLogs.$logContent.offset().top - 50;
        $('.log-content-readonly').css('min-height', "".concat(aceHeight, "px"));
        systemDiagnosticLogs.viewer.resize();
      });
    }

    return initializeAce;
  }(),

  /**
   * Makes formatted menu structure
   */
  cbFormatDropdownResults: function () {
    function cbFormatDropdownResults(response) {
      if (response === false) {
        return;
      }

      systemDiagnosticLogs.logsItems = [];
      var files = response.files;
      $.each(files, function (index, item) {
        systemDiagnosticLogs.logsItems.push({
          name: "".concat(index, " (").concat(item.size, ")"),
          value: item.path,
          selected: item["default"]
        });
      });
      systemDiagnosticLogs.$fileSelectDropDown.dropdown('change values', systemDiagnosticLogs.logsItems);
    }

    return cbFormatDropdownResults;
  }(),

  /**
   * Callback after change log file in select
   * @param value
   */
  cbOnChangeFile: function () {
    function cbOnChangeFile(value) {
      if (value.length === 0) {
        return;
      }

      systemDiagnosticLogs.$formObj.form('set value', 'filename', value);
      systemDiagnosticLogs.updateLogFromServer();
    }

    return cbOnChangeFile;
  }(),

  /**
   * Asks log file content from server
   */
  updateLogFromServer: function () {
    function updateLogFromServer() {
      var params = systemDiagnosticLogs.$formObj.form('get values');
      PbxApi.SyslogGetLogFromFile(params, systemDiagnosticLogs.cbUpdateLogText);
    }

    return updateLogFromServer;
  }(),

  /**
   * Updates log view
   * @param data
   */
  cbUpdateLogText: function () {
    function cbUpdateLogText(data) {
      systemDiagnosticLogs.viewer.getSession().setValue(data.content);
      var row = systemDiagnosticLogs.viewer.session.getLength() - 1;
      var column = systemDiagnosticLogs.viewer.session.getLine(row).length; // or simply Infinity

      systemDiagnosticLogs.viewer.gotoLine(row + 1, column);
      systemDiagnosticLogs.$dimmer.removeClass('active');
    }

    return cbUpdateLogText;
  }(),

  /**
   * After push button download file
   * @param response
   */
  cbDownloadFile: function () {
    function cbDownloadFile(response) {
      if (response !== false) {
        window.location = response.filename;
      }
    }

    return cbDownloadFile;
  }()
};
$(document).ready(function () {
  systemDiagnosticLogs.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,