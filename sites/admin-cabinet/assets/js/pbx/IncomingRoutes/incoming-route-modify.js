"use strict";

/*
 * Copyright Â© MIKO LLC - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Alexey Portnov, 8 2020
 */

/* global globalRootUrl,globalTranslate, Extensions, Form */
var incomingRouteModify = {
  $formObj: $('#incoming-route-form'),
  $providerDropDown: $('#provider'),
  $forwardingSelectDropdown: $('#incoming-route-form .forwarding-select'),
  validateRules: {
    extension: {
      identifier: 'extension',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.ir_ValidateForwardingToBeFilled
      }]
    },
    timeout: {
      identifier: 'timeout',
      rules: [{
        type: 'integer[3..300]',
        prompt: globalTranslate.ir_ValidateTimeoutOutOfRange
      }]
    }
  },
  initialize: function () {
    function initialize() {
      incomingRouteModify.$providerDropDown.dropdown();
      incomingRouteModify.initializeForm();
      incomingRouteModify.$forwardingSelectDropdown.dropdown(Extensions.getDropdownSettingsWithoutEmpty());
      Extensions.fixBugDropdownIcon();
    }

    return initialize;
  }(),
  cbBeforeSendForm: function () {
    function cbBeforeSendForm(settings) {
      var result = settings;
      result.data = incomingRouteModify.$formObj.form('get values');
      return result;
    }

    return cbBeforeSendForm;
  }(),
  cbAfterSendForm: function () {
    function cbAfterSendForm() {}

    return cbAfterSendForm;
  }(),
  initializeForm: function () {
    function initializeForm() {
      Form.$formObj = incomingRouteModify.$formObj;
      Form.url = "".concat(globalRootUrl, "incoming-routes/save");
      Form.validateRules = incomingRouteModify.validateRules;
      Form.cbBeforeSendForm = incomingRouteModify.cbBeforeSendForm;
      Form.cbAfterSendForm = incomingRouteModify.cbAfterSendForm;
      Form.initialize();
    }

    return initializeForm;
  }()
};
$(document).ready(function () {
  incomingRouteModify.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9JbmNvbWluZ1JvdXRlcy9pbmNvbWluZy1yb3V0ZS1tb2RpZnkuanMiXSwibmFtZXMiOlsiaW5jb21pbmdSb3V0ZU1vZGlmeSIsIiRmb3JtT2JqIiwiJCIsIiRwcm92aWRlckRyb3BEb3duIiwiJGZvcndhcmRpbmdTZWxlY3REcm9wZG93biIsInZhbGlkYXRlUnVsZXMiLCJleHRlbnNpb24iLCJpZGVudGlmaWVyIiwicnVsZXMiLCJ0eXBlIiwicHJvbXB0IiwiZ2xvYmFsVHJhbnNsYXRlIiwiaXJfVmFsaWRhdGVGb3J3YXJkaW5nVG9CZUZpbGxlZCIsInRpbWVvdXQiLCJpcl9WYWxpZGF0ZVRpbWVvdXRPdXRPZlJhbmdlIiwiaW5pdGlhbGl6ZSIsImRyb3Bkb3duIiwiaW5pdGlhbGl6ZUZvcm0iLCJFeHRlbnNpb25zIiwiZ2V0RHJvcGRvd25TZXR0aW5nc1dpdGhvdXRFbXB0eSIsImZpeEJ1Z0Ryb3Bkb3duSWNvbiIsImNiQmVmb3JlU2VuZEZvcm0iLCJzZXR0aW5ncyIsInJlc3VsdCIsImRhdGEiLCJmb3JtIiwiY2JBZnRlclNlbmRGb3JtIiwiRm9ybSIsInVybCIsImdsb2JhbFJvb3RVcmwiLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBT0E7QUFFQSxJQUFNQSxtQkFBbUIsR0FBRztBQUMzQkMsRUFBQUEsUUFBUSxFQUFFQyxDQUFDLENBQUMsc0JBQUQsQ0FEZ0I7QUFFM0JDLEVBQUFBLGlCQUFpQixFQUFFRCxDQUFDLENBQUMsV0FBRCxDQUZPO0FBRzNCRSxFQUFBQSx5QkFBeUIsRUFBRUYsQ0FBQyxDQUFDLHlDQUFELENBSEQ7QUFJM0JHLEVBQUFBLGFBQWEsRUFBRTtBQUNkQyxJQUFBQSxTQUFTLEVBQUU7QUFDVkMsTUFBQUEsVUFBVSxFQUFFLFdBREY7QUFFVkMsTUFBQUEsS0FBSyxFQUFFLENBQ047QUFDQ0MsUUFBQUEsSUFBSSxFQUFFLE9BRFA7QUFFQ0MsUUFBQUEsTUFBTSxFQUFFQyxlQUFlLENBQUNDO0FBRnpCLE9BRE07QUFGRyxLQURHO0FBVWRDLElBQUFBLE9BQU8sRUFBRTtBQUNSTixNQUFBQSxVQUFVLEVBQUUsU0FESjtBQUVSQyxNQUFBQSxLQUFLLEVBQUUsQ0FDTjtBQUNDQyxRQUFBQSxJQUFJLEVBQUUsaUJBRFA7QUFFQ0MsUUFBQUEsTUFBTSxFQUFFQyxlQUFlLENBQUNHO0FBRnpCLE9BRE07QUFGQztBQVZLLEdBSlk7QUF3QjNCQyxFQUFBQSxVQXhCMkI7QUFBQSwwQkF3QmQ7QUFDWmYsTUFBQUEsbUJBQW1CLENBQUNHLGlCQUFwQixDQUFzQ2EsUUFBdEM7QUFDQWhCLE1BQUFBLG1CQUFtQixDQUFDaUIsY0FBcEI7QUFDQWpCLE1BQUFBLG1CQUFtQixDQUFDSSx5QkFBcEIsQ0FBOENZLFFBQTlDLENBQXVERSxVQUFVLENBQUNDLCtCQUFYLEVBQXZEO0FBQ0FELE1BQUFBLFVBQVUsQ0FBQ0Usa0JBQVg7QUFDQTs7QUE3QjBCO0FBQUE7QUE4QjNCQyxFQUFBQSxnQkE5QjJCO0FBQUEsOEJBOEJWQyxRQTlCVSxFQThCQTtBQUMxQixVQUFNQyxNQUFNLEdBQUdELFFBQWY7QUFDQUMsTUFBQUEsTUFBTSxDQUFDQyxJQUFQLEdBQWN4QixtQkFBbUIsQ0FBQ0MsUUFBcEIsQ0FBNkJ3QixJQUE3QixDQUFrQyxZQUFsQyxDQUFkO0FBQ0EsYUFBT0YsTUFBUDtBQUNBOztBQWxDMEI7QUFBQTtBQW1DM0JHLEVBQUFBLGVBbkMyQjtBQUFBLCtCQW1DVCxDQUVqQjs7QUFyQzBCO0FBQUE7QUFzQzNCVCxFQUFBQSxjQXRDMkI7QUFBQSw4QkFzQ1Y7QUFDaEJVLE1BQUFBLElBQUksQ0FBQzFCLFFBQUwsR0FBZ0JELG1CQUFtQixDQUFDQyxRQUFwQztBQUNBMEIsTUFBQUEsSUFBSSxDQUFDQyxHQUFMLGFBQWNDLGFBQWQ7QUFDQUYsTUFBQUEsSUFBSSxDQUFDdEIsYUFBTCxHQUFxQkwsbUJBQW1CLENBQUNLLGFBQXpDO0FBQ0FzQixNQUFBQSxJQUFJLENBQUNOLGdCQUFMLEdBQXdCckIsbUJBQW1CLENBQUNxQixnQkFBNUM7QUFDQU0sTUFBQUEsSUFBSSxDQUFDRCxlQUFMLEdBQXVCMUIsbUJBQW1CLENBQUMwQixlQUEzQztBQUNBQyxNQUFBQSxJQUFJLENBQUNaLFVBQUw7QUFDQTs7QUE3QzBCO0FBQUE7QUFBQSxDQUE1QjtBQWdEQWIsQ0FBQyxDQUFDNEIsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUN2Qi9CLEVBQUFBLG1CQUFtQixDQUFDZSxVQUFwQjtBQUNBLENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IMKpIE1JS08gTExDIC0gQWxsIFJpZ2h0cyBSZXNlcnZlZFxuICogVW5hdXRob3JpemVkIGNvcHlpbmcgb2YgdGhpcyBmaWxlLCB2aWEgYW55IG1lZGl1bSBpcyBzdHJpY3RseSBwcm9oaWJpdGVkXG4gKiBQcm9wcmlldGFyeSBhbmQgY29uZmlkZW50aWFsXG4gKiBXcml0dGVuIGJ5IEFsZXhleSBQb3J0bm92LCA4IDIwMjBcbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCxnbG9iYWxUcmFuc2xhdGUsIEV4dGVuc2lvbnMsIEZvcm0gKi9cblxuY29uc3QgaW5jb21pbmdSb3V0ZU1vZGlmeSA9IHtcblx0JGZvcm1PYmo6ICQoJyNpbmNvbWluZy1yb3V0ZS1mb3JtJyksXG5cdCRwcm92aWRlckRyb3BEb3duOiAkKCcjcHJvdmlkZXInKSxcblx0JGZvcndhcmRpbmdTZWxlY3REcm9wZG93bjogJCgnI2luY29taW5nLXJvdXRlLWZvcm0gLmZvcndhcmRpbmctc2VsZWN0JyksXG5cdHZhbGlkYXRlUnVsZXM6IHtcblx0XHRleHRlbnNpb246IHtcblx0XHRcdGlkZW50aWZpZXI6ICdleHRlbnNpb24nLFxuXHRcdFx0cnVsZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdlbXB0eScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUuaXJfVmFsaWRhdGVGb3J3YXJkaW5nVG9CZUZpbGxlZCxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHR0aW1lb3V0OiB7XG5cdFx0XHRpZGVudGlmaWVyOiAndGltZW91dCcsXG5cdFx0XHRydWxlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2ludGVnZXJbMy4uMzAwXScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUuaXJfVmFsaWRhdGVUaW1lb3V0T3V0T2ZSYW5nZSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0fSxcblx0aW5pdGlhbGl6ZSgpIHtcblx0XHRpbmNvbWluZ1JvdXRlTW9kaWZ5LiRwcm92aWRlckRyb3BEb3duLmRyb3Bkb3duKCk7XG5cdFx0aW5jb21pbmdSb3V0ZU1vZGlmeS5pbml0aWFsaXplRm9ybSgpO1xuXHRcdGluY29taW5nUm91dGVNb2RpZnkuJGZvcndhcmRpbmdTZWxlY3REcm9wZG93bi5kcm9wZG93bihFeHRlbnNpb25zLmdldERyb3Bkb3duU2V0dGluZ3NXaXRob3V0RW1wdHkoKSk7XG5cdFx0RXh0ZW5zaW9ucy5maXhCdWdEcm9wZG93bkljb24oKTtcblx0fSxcblx0Y2JCZWZvcmVTZW5kRm9ybShzZXR0aW5ncykge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHNldHRpbmdzO1xuXHRcdHJlc3VsdC5kYXRhID0gaW5jb21pbmdSb3V0ZU1vZGlmeS4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWVzJyk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSxcblx0Y2JBZnRlclNlbmRGb3JtKCkge1xuXG5cdH0sXG5cdGluaXRpYWxpemVGb3JtKCkge1xuXHRcdEZvcm0uJGZvcm1PYmogPSBpbmNvbWluZ1JvdXRlTW9kaWZ5LiRmb3JtT2JqO1xuXHRcdEZvcm0udXJsID0gYCR7Z2xvYmFsUm9vdFVybH1pbmNvbWluZy1yb3V0ZXMvc2F2ZWA7XG5cdFx0Rm9ybS52YWxpZGF0ZVJ1bGVzID0gaW5jb21pbmdSb3V0ZU1vZGlmeS52YWxpZGF0ZVJ1bGVzO1xuXHRcdEZvcm0uY2JCZWZvcmVTZW5kRm9ybSA9IGluY29taW5nUm91dGVNb2RpZnkuY2JCZWZvcmVTZW5kRm9ybTtcblx0XHRGb3JtLmNiQWZ0ZXJTZW5kRm9ybSA9IGluY29taW5nUm91dGVNb2RpZnkuY2JBZnRlclNlbmRGb3JtO1xuXHRcdEZvcm0uaW5pdGlhbGl6ZSgpO1xuXHR9LFxufTtcblxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuXHRpbmNvbWluZ1JvdXRlTW9kaWZ5LmluaXRpYWxpemUoKTtcbn0pO1xuIl19